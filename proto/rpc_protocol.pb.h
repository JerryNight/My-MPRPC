// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fprotocol_2eproto;
namespace rpc {
class RpcRequestProto;
struct RpcRequestProtoDefaultTypeInternal;
extern RpcRequestProtoDefaultTypeInternal _RpcRequestProto_default_instance_;
class RpcRequestProto_MetadataEntry_DoNotUse;
struct RpcRequestProto_MetadataEntry_DoNotUseDefaultTypeInternal;
extern RpcRequestProto_MetadataEntry_DoNotUseDefaultTypeInternal _RpcRequestProto_MetadataEntry_DoNotUse_default_instance_;
class RpcResponseProto;
struct RpcResponseProtoDefaultTypeInternal;
extern RpcResponseProtoDefaultTypeInternal _RpcResponseProto_default_instance_;
class RpcResponseProto_MetadataEntry_DoNotUse;
struct RpcResponseProto_MetadataEntry_DoNotUseDefaultTypeInternal;
extern RpcResponseProto_MetadataEntry_DoNotUseDefaultTypeInternal _RpcResponseProto_MetadataEntry_DoNotUse_default_instance_;
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::rpc::RpcRequestProto* Arena::CreateMaybeMessage<::rpc::RpcRequestProto>(Arena*);
template<> ::rpc::RpcRequestProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::rpc::RpcRequestProto_MetadataEntry_DoNotUse>(Arena*);
template<> ::rpc::RpcResponseProto* Arena::CreateMaybeMessage<::rpc::RpcResponseProto>(Arena*);
template<> ::rpc::RpcResponseProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::rpc::RpcResponseProto_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpc {

enum RpcErrorCode : int {
  SUCCESS = 0,
  SERVICE_NOT_FOUND = 1,
  METHOD_NOT_FOUND = 2,
  INVALID_REQUEST = 3,
  SERIALIZATION_ERROR = 4,
  DESERIALIZATION_ERROR = 5,
  TIMEOUT = 6,
  NETWORK_ERROR = 7,
  SERVER_ERROR = 8,
  UNKNOWN_ERROR = 99,
  RpcErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RpcErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RpcErrorCode_IsValid(int value);
constexpr RpcErrorCode RpcErrorCode_MIN = SUCCESS;
constexpr RpcErrorCode RpcErrorCode_MAX = UNKNOWN_ERROR;
constexpr int RpcErrorCode_ARRAYSIZE = RpcErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcErrorCode_descriptor();
template<typename T>
inline const std::string& RpcErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcErrorCode_descriptor(), enum_t_value);
}
inline bool RpcErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcErrorCode>(
    RpcErrorCode_descriptor(), name, value);
}
// ===================================================================

class RpcRequestProto_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcRequestProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcRequestProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  RpcRequestProto_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RpcRequestProto_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RpcRequestProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RpcRequestProto_MetadataEntry_DoNotUse& other);
  static const RpcRequestProto_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RpcRequestProto_MetadataEntry_DoNotUse*>(&_RpcRequestProto_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "rpc.RpcRequestProto.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "rpc.RpcRequestProto.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_rpc_5fprotocol_2eproto;
};

// -------------------------------------------------------------------

class RpcRequestProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.RpcRequestProto) */ {
 public:
  inline RpcRequestProto() : RpcRequestProto(nullptr) {}
  ~RpcRequestProto() override;
  explicit PROTOBUF_CONSTEXPR RpcRequestProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcRequestProto(const RpcRequestProto& from);
  RpcRequestProto(RpcRequestProto&& from) noexcept
    : RpcRequestProto() {
    *this = ::std::move(from);
  }

  inline RpcRequestProto& operator=(const RpcRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequestProto& operator=(RpcRequestProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcRequestProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcRequestProto* internal_default_instance() {
    return reinterpret_cast<const RpcRequestProto*>(
               &_RpcRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcRequestProto& a, RpcRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcRequestProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcRequestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcRequestProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcRequestProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcRequestProto& from) {
    RpcRequestProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.RpcRequestProto";
  }
  protected:
  explicit RpcRequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 7,
    kServiceNameFieldNumber = 2,
    kMethodNameFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kRequestDataFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kTimeoutMsFieldNumber = 6,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string method_name = 3;
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // string client_id = 4;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // bytes request_data = 5;
  void clear_request_data();
  const std::string& request_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_data();
  PROTOBUF_NODISCARD std::string* release_request_data();
  void set_allocated_request_data(std::string* request_data);
  private:
  const std::string& _internal_request_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_data(const std::string& value);
  std::string* _internal_mutable_request_data();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // int32 timeout_ms = 6;
  void clear_timeout_ms();
  int32_t timeout_ms() const;
  void set_timeout_ms(int32_t value);
  private:
  int32_t _internal_timeout_ms() const;
  void _internal_set_timeout_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rpc.RpcRequestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RpcRequestProto_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_data_;
    uint64_t request_id_;
    int32_t timeout_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RpcResponseProto_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcResponseProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcResponseProto_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  RpcResponseProto_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RpcResponseProto_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RpcResponseProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RpcResponseProto_MetadataEntry_DoNotUse& other);
  static const RpcResponseProto_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RpcResponseProto_MetadataEntry_DoNotUse*>(&_RpcResponseProto_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "rpc.RpcResponseProto.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "rpc.RpcResponseProto.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_rpc_5fprotocol_2eproto;
};

// -------------------------------------------------------------------

class RpcResponseProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.RpcResponseProto) */ {
 public:
  inline RpcResponseProto() : RpcResponseProto(nullptr) {}
  ~RpcResponseProto() override;
  explicit PROTOBUF_CONSTEXPR RpcResponseProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcResponseProto(const RpcResponseProto& from);
  RpcResponseProto(RpcResponseProto&& from) noexcept
    : RpcResponseProto() {
    *this = ::std::move(from);
  }

  inline RpcResponseProto& operator=(const RpcResponseProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponseProto& operator=(RpcResponseProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponseProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcResponseProto* internal_default_instance() {
    return reinterpret_cast<const RpcResponseProto*>(
               &_RpcResponseProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RpcResponseProto& a, RpcResponseProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResponseProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponseProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponseProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResponseProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcResponseProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcResponseProto& from) {
    RpcResponseProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponseProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.RpcResponseProto";
  }
  protected:
  explicit RpcResponseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 6,
    kResponseDataFieldNumber = 3,
    kErrorMessageFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kErrorCodeFieldNumber = 4,
  };
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes response_data = 3;
  void clear_response_data();
  const std::string& response_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_data();
  PROTOBUF_NODISCARD std::string* release_response_data();
  void set_allocated_response_data(std::string* response_data);
  private:
  const std::string& _internal_response_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_data(const std::string& value);
  std::string* _internal_mutable_response_data();
  public:

  // string error_message = 5;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 error_code = 4;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rpc.RpcResponseProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RpcResponseProto_MetadataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    uint64_t request_id_;
    bool success_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RpcRequestProto

// uint64 request_id = 1;
inline void RpcRequestProto::clear_request_id() {
  _impl_.request_id_ = uint64_t{0u};
}
inline uint64_t RpcRequestProto::_internal_request_id() const {
  return _impl_.request_id_;
}
inline uint64_t RpcRequestProto::request_id() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestProto.request_id)
  return _internal_request_id();
}
inline void RpcRequestProto::_internal_set_request_id(uint64_t value) {
  
  _impl_.request_id_ = value;
}
inline void RpcRequestProto::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:rpc.RpcRequestProto.request_id)
}

// string service_name = 2;
inline void RpcRequestProto::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& RpcRequestProto::service_name() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestProto.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestProto::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc.RpcRequestProto.service_name)
}
inline std::string* RpcRequestProto::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequestProto.service_name)
  return _s;
}
inline const std::string& RpcRequestProto::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void RpcRequestProto::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestProto::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestProto::release_service_name() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequestProto.service_name)
  return _impl_.service_name_.Release();
}
inline void RpcRequestProto::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequestProto.service_name)
}

// string method_name = 3;
inline void RpcRequestProto::clear_method_name() {
  _impl_.method_name_.ClearToEmpty();
}
inline const std::string& RpcRequestProto::method_name() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestProto.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestProto::set_method_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc.RpcRequestProto.method_name)
}
inline std::string* RpcRequestProto::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequestProto.method_name)
  return _s;
}
inline const std::string& RpcRequestProto::_internal_method_name() const {
  return _impl_.method_name_.Get();
}
inline void RpcRequestProto::_internal_set_method_name(const std::string& value) {
  
  _impl_.method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestProto::_internal_mutable_method_name() {
  
  return _impl_.method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestProto::release_method_name() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequestProto.method_name)
  return _impl_.method_name_.Release();
}
inline void RpcRequestProto::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  _impl_.method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequestProto.method_name)
}

// string client_id = 4;
inline void RpcRequestProto::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& RpcRequestProto::client_id() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestProto.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestProto::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc.RpcRequestProto.client_id)
}
inline std::string* RpcRequestProto::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequestProto.client_id)
  return _s;
}
inline const std::string& RpcRequestProto::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void RpcRequestProto::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestProto::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestProto::release_client_id() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequestProto.client_id)
  return _impl_.client_id_.Release();
}
inline void RpcRequestProto::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequestProto.client_id)
}

// bytes request_data = 5;
inline void RpcRequestProto::clear_request_data() {
  _impl_.request_data_.ClearToEmpty();
}
inline const std::string& RpcRequestProto::request_data() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestProto.request_data)
  return _internal_request_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestProto::set_request_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc.RpcRequestProto.request_data)
}
inline std::string* RpcRequestProto::mutable_request_data() {
  std::string* _s = _internal_mutable_request_data();
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequestProto.request_data)
  return _s;
}
inline const std::string& RpcRequestProto::_internal_request_data() const {
  return _impl_.request_data_.Get();
}
inline void RpcRequestProto::_internal_set_request_data(const std::string& value) {
  
  _impl_.request_data_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestProto::_internal_mutable_request_data() {
  
  return _impl_.request_data_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestProto::release_request_data() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequestProto.request_data)
  return _impl_.request_data_.Release();
}
inline void RpcRequestProto::set_allocated_request_data(std::string* request_data) {
  if (request_data != nullptr) {
    
  } else {
    
  }
  _impl_.request_data_.SetAllocated(request_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_data_.IsDefault()) {
    _impl_.request_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequestProto.request_data)
}

// int32 timeout_ms = 6;
inline void RpcRequestProto::clear_timeout_ms() {
  _impl_.timeout_ms_ = 0;
}
inline int32_t RpcRequestProto::_internal_timeout_ms() const {
  return _impl_.timeout_ms_;
}
inline int32_t RpcRequestProto::timeout_ms() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestProto.timeout_ms)
  return _internal_timeout_ms();
}
inline void RpcRequestProto::_internal_set_timeout_ms(int32_t value) {
  
  _impl_.timeout_ms_ = value;
}
inline void RpcRequestProto::set_timeout_ms(int32_t value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:rpc.RpcRequestProto.timeout_ms)
}

// map<string, string> metadata = 7;
inline int RpcRequestProto::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int RpcRequestProto::metadata_size() const {
  return _internal_metadata_size();
}
inline void RpcRequestProto::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcRequestProto::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcRequestProto::metadata() const {
  // @@protoc_insertion_point(field_map:rpc.RpcRequestProto.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcRequestProto::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcRequestProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:rpc.RpcRequestProto.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RpcResponseProto

// uint64 request_id = 1;
inline void RpcResponseProto::clear_request_id() {
  _impl_.request_id_ = uint64_t{0u};
}
inline uint64_t RpcResponseProto::_internal_request_id() const {
  return _impl_.request_id_;
}
inline uint64_t RpcResponseProto::request_id() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponseProto.request_id)
  return _internal_request_id();
}
inline void RpcResponseProto::_internal_set_request_id(uint64_t value) {
  
  _impl_.request_id_ = value;
}
inline void RpcResponseProto::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:rpc.RpcResponseProto.request_id)
}

// bool success = 2;
inline void RpcResponseProto::clear_success() {
  _impl_.success_ = false;
}
inline bool RpcResponseProto::_internal_success() const {
  return _impl_.success_;
}
inline bool RpcResponseProto::success() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponseProto.success)
  return _internal_success();
}
inline void RpcResponseProto::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void RpcResponseProto::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpc.RpcResponseProto.success)
}

// bytes response_data = 3;
inline void RpcResponseProto::clear_response_data() {
  _impl_.response_data_.ClearToEmpty();
}
inline const std::string& RpcResponseProto::response_data() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponseProto.response_data)
  return _internal_response_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcResponseProto::set_response_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.response_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc.RpcResponseProto.response_data)
}
inline std::string* RpcResponseProto::mutable_response_data() {
  std::string* _s = _internal_mutable_response_data();
  // @@protoc_insertion_point(field_mutable:rpc.RpcResponseProto.response_data)
  return _s;
}
inline const std::string& RpcResponseProto::_internal_response_data() const {
  return _impl_.response_data_.Get();
}
inline void RpcResponseProto::_internal_set_response_data(const std::string& value) {
  
  _impl_.response_data_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcResponseProto::_internal_mutable_response_data() {
  
  return _impl_.response_data_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcResponseProto::release_response_data() {
  // @@protoc_insertion_point(field_release:rpc.RpcResponseProto.response_data)
  return _impl_.response_data_.Release();
}
inline void RpcResponseProto::set_allocated_response_data(std::string* response_data) {
  if (response_data != nullptr) {
    
  } else {
    
  }
  _impl_.response_data_.SetAllocated(response_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_data_.IsDefault()) {
    _impl_.response_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcResponseProto.response_data)
}

// int32 error_code = 4;
inline void RpcResponseProto::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t RpcResponseProto::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t RpcResponseProto::error_code() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponseProto.error_code)
  return _internal_error_code();
}
inline void RpcResponseProto::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void RpcResponseProto::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:rpc.RpcResponseProto.error_code)
}

// string error_message = 5;
inline void RpcResponseProto::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& RpcResponseProto::error_message() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponseProto.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcResponseProto::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc.RpcResponseProto.error_message)
}
inline std::string* RpcResponseProto::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:rpc.RpcResponseProto.error_message)
  return _s;
}
inline const std::string& RpcResponseProto::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void RpcResponseProto::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcResponseProto::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcResponseProto::release_error_message() {
  // @@protoc_insertion_point(field_release:rpc.RpcResponseProto.error_message)
  return _impl_.error_message_.Release();
}
inline void RpcResponseProto::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcResponseProto.error_message)
}

// map<string, string> metadata = 6;
inline int RpcResponseProto::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int RpcResponseProto::metadata_size() const {
  return _internal_metadata_size();
}
inline void RpcResponseProto::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcResponseProto::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcResponseProto::metadata() const {
  // @@protoc_insertion_point(field_map:rpc.RpcResponseProto.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcResponseProto::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcResponseProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:rpc.RpcResponseProto.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rpc::RpcErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::RpcErrorCode>() {
  return ::rpc::RpcErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fprotocol_2eproto
