// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_protocol.proto

#include "rpc_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rpc {
PROTOBUF_CONSTEXPR RpcRequestProto_MetadataEntry_DoNotUse::RpcRequestProto_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RpcRequestProto_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestProto_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestProto_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RpcRequestProto_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestProto_MetadataEntry_DoNotUseDefaultTypeInternal _RpcRequestProto_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RpcRequestProto::RpcRequestProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timeout_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcRequestProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestProtoDefaultTypeInternal() {}
  union {
    RpcRequestProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestProtoDefaultTypeInternal _RpcRequestProto_default_instance_;
PROTOBUF_CONSTEXPR RpcResponseProto_MetadataEntry_DoNotUse::RpcResponseProto_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RpcResponseProto_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseProto_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseProto_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RpcResponseProto_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseProto_MetadataEntry_DoNotUseDefaultTypeInternal _RpcResponseProto_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RpcResponseProto::RpcResponseProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.response_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcResponseProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseProtoDefaultTypeInternal() {}
  union {
    RpcResponseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseProtoDefaultTypeInternal _RpcResponseProto_default_instance_;
}  // namespace rpc
static ::_pb::Metadata file_level_metadata_rpc_5fprotocol_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rpc_5fprotocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5fprotocol_2eproto = nullptr;

const uint32_t TableStruct_rpc_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _impl_.request_data_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _impl_.timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcRequestProto, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto, _impl_.response_data_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::rpc::RpcResponseProto, _impl_.metadata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::rpc::RpcRequestProto_MetadataEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::rpc::RpcRequestProto)},
  { 23, 31, -1, sizeof(::rpc::RpcResponseProto_MetadataEntry_DoNotUse)},
  { 33, -1, -1, sizeof(::rpc::RpcResponseProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rpc::_RpcRequestProto_MetadataEntry_DoNotUse_default_instance_._instance,
  &::rpc::_RpcRequestProto_default_instance_._instance,
  &::rpc::_RpcResponseProto_MetadataEntry_DoNotUse_default_instance_._instance,
  &::rpc::_RpcResponseProto_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022rpc_protocol.proto\022\003rpc\"\364\001\n\017RpcRequest"
  "Proto\022\022\n\nrequest_id\030\001 \001(\004\022\024\n\014service_nam"
  "e\030\002 \001(\t\022\023\n\013method_name\030\003 \001(\t\022\021\n\tclient_i"
  "d\030\004 \001(\t\022\024\n\014request_data\030\005 \001(\014\022\022\n\ntimeout"
  "_ms\030\006 \001(\005\0224\n\010metadata\030\007 \003(\0132\".rpc.RpcReq"
  "uestProto.MetadataEntry\032/\n\rMetadataEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\341\001\n\020Rpc"
  "ResponseProto\022\022\n\nrequest_id\030\001 \001(\004\022\017\n\007suc"
  "cess\030\002 \001(\010\022\025\n\rresponse_data\030\003 \001(\014\022\022\n\nerr"
  "or_code\030\004 \001(\005\022\025\n\rerror_message\030\005 \001(\t\0225\n\010"
  "metadata\030\006 \003(\0132#.rpc.RpcResponseProto.Me"
  "tadataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001*\326\001\n\014RpcErrorCode\022\013\n"
  "\007SUCCESS\020\000\022\025\n\021SERVICE_NOT_FOUND\020\001\022\024\n\020MET"
  "HOD_NOT_FOUND\020\002\022\023\n\017INVALID_REQUEST\020\003\022\027\n\023"
  "SERIALIZATION_ERROR\020\004\022\031\n\025DESERIALIZATION"
  "_ERROR\020\005\022\013\n\007TIMEOUT\020\006\022\021\n\rNETWORK_ERROR\020\007"
  "\022\020\n\014SERVER_ERROR\020\010\022\021\n\rUNKNOWN_ERROR\020cb\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5fprotocol_2eproto = {
    false, false, 725, descriptor_table_protodef_rpc_5fprotocol_2eproto,
    "rpc_protocol.proto",
    &descriptor_table_rpc_5fprotocol_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_rpc_5fprotocol_2eproto::offsets,
    file_level_metadata_rpc_5fprotocol_2eproto, file_level_enum_descriptors_rpc_5fprotocol_2eproto,
    file_level_service_descriptors_rpc_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5fprotocol_2eproto_getter() {
  return &descriptor_table_rpc_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5fprotocol_2eproto(&descriptor_table_rpc_5fprotocol_2eproto);
namespace rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fprotocol_2eproto);
  return file_level_enum_descriptors_rpc_5fprotocol_2eproto[0];
}
bool RpcErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 99:
      return true;
    default:
      return false;
  }
}


// ===================================================================

RpcRequestProto_MetadataEntry_DoNotUse::RpcRequestProto_MetadataEntry_DoNotUse() {}
RpcRequestProto_MetadataEntry_DoNotUse::RpcRequestProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RpcRequestProto_MetadataEntry_DoNotUse::MergeFrom(const RpcRequestProto_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RpcRequestProto_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fprotocol_2eproto_getter, &descriptor_table_rpc_5fprotocol_2eproto_once,
      file_level_metadata_rpc_5fprotocol_2eproto[0]);
}

// ===================================================================

class RpcRequestProto::_Internal {
 public:
};

RpcRequestProto::RpcRequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RpcRequestProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:rpc.RpcRequestProto)
}
RpcRequestProto::RpcRequestProto(const RpcRequestProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcRequestProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.request_data_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.timeout_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.request_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_data().empty()) {
    _this->_impl_.request_data_.Set(from._internal_request_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_ms_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:rpc.RpcRequestProto)
}

inline void RpcRequestProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.request_data_){}
    , decltype(_impl_.request_id_){uint64_t{0u}}
    , decltype(_impl_.timeout_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.request_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcRequestProto::~RpcRequestProto() {
  // @@protoc_insertion_point(destructor:rpc.RpcRequestProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RpcRequestProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.service_name_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.client_id_.Destroy();
  _impl_.request_data_.Destroy();
}

void RpcRequestProto::ArenaDtor(void* object) {
  RpcRequestProto* _this = reinterpret_cast< RpcRequestProto* >(object);
  _this->_impl_.metadata_.Destruct();
}
void RpcRequestProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcRequestProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.RpcRequestProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.service_name_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.request_data_.ClearToEmpty();
  ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_ms_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.timeout_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcRequestProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcRequestProto.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcRequestProto.method_name"));
        } else
          goto handle_unusual;
        continue;
      // string client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcRequestProto.client_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes request_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_request_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeout_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcRequestProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RpcRequestProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcRequestProto.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  // string method_name = 3;
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcRequestProto.method_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method_name(), target);
  }

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcRequestProto.client_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_id(), target);
  }

  // bytes request_data = 5;
  if (!this->_internal_request_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_request_data(), target);
  }

  // int32 timeout_ms = 6;
  if (this->_internal_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_timeout_ms(), target);
  }

  // map<string, string> metadata = 7;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RpcRequestProto_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.RpcRequestProto.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.RpcRequestProto.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.RpcRequestProto)
  return target;
}

size_t RpcRequestProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.RpcRequestProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += RpcRequestProto_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string method_name = 3;
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // bytes request_data = 5;
  if (!this->_internal_request_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_request_data());
  }

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_id());
  }

  // int32 timeout_ms = 6;
  if (this->_internal_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcRequestProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcRequestProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcRequestProto::GetClassData() const { return &_class_data_; }


void RpcRequestProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcRequestProto*>(&to_msg);
  auto& from = static_cast<const RpcRequestProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.RpcRequestProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_request_data().empty()) {
    _this->_internal_set_request_data(from._internal_request_data());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_timeout_ms() != 0) {
    _this->_internal_set_timeout_ms(from._internal_timeout_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequestProto::CopyFrom(const RpcRequestProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.RpcRequestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestProto::IsInitialized() const {
  return true;
}

void RpcRequestProto::InternalSwap(RpcRequestProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_data_, lhs_arena,
      &other->_impl_.request_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcRequestProto, _impl_.timeout_ms_)
      + sizeof(RpcRequestProto::_impl_.timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(RpcRequestProto, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcRequestProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fprotocol_2eproto_getter, &descriptor_table_rpc_5fprotocol_2eproto_once,
      file_level_metadata_rpc_5fprotocol_2eproto[1]);
}

// ===================================================================

RpcResponseProto_MetadataEntry_DoNotUse::RpcResponseProto_MetadataEntry_DoNotUse() {}
RpcResponseProto_MetadataEntry_DoNotUse::RpcResponseProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RpcResponseProto_MetadataEntry_DoNotUse::MergeFrom(const RpcResponseProto_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RpcResponseProto_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fprotocol_2eproto_getter, &descriptor_table_rpc_5fprotocol_2eproto_once,
      file_level_metadata_rpc_5fprotocol_2eproto[2]);
}

// ===================================================================

class RpcResponseProto::_Internal {
 public:
};

RpcResponseProto::RpcResponseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RpcResponseProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:rpc.RpcResponseProto)
}
RpcResponseProto::RpcResponseProto(const RpcResponseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcResponseProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.response_data_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.response_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_data().empty()) {
    _this->_impl_.response_data_.Set(from._internal_response_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.error_code_));
  // @@protoc_insertion_point(copy_constructor:rpc.RpcResponseProto)
}

inline void RpcResponseProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.response_data_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.request_id_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.response_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcResponseProto::~RpcResponseProto() {
  // @@protoc_insertion_point(destructor:rpc.RpcResponseProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RpcResponseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.response_data_.Destroy();
  _impl_.error_message_.Destroy();
}

void RpcResponseProto::ArenaDtor(void* object) {
  RpcResponseProto* _this = reinterpret_cast< RpcResponseProto* >(object);
  _this->_impl_.metadata_.Destruct();
}
void RpcResponseProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcResponseProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.RpcResponseProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.response_data_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResponseProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes response_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_response_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rpc.RpcResponseProto.error_message"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResponseProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RpcResponseProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // bytes response_data = 3;
  if (!this->_internal_response_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_response_data(), target);
  }

  // int32 error_code = 4;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_error_code(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RpcResponseProto.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  // map<string, string> metadata = 6;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RpcResponseProto_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.RpcResponseProto.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "rpc.RpcResponseProto.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.RpcResponseProto)
  return target;
}

size_t RpcResponseProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.RpcResponseProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += RpcResponseProto_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes response_data = 3;
  if (!this->_internal_response_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_response_data());
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_id());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 error_code = 4;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResponseProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcResponseProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResponseProto::GetClassData() const { return &_class_data_; }


void RpcResponseProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcResponseProto*>(&to_msg);
  auto& from = static_cast<const RpcResponseProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.RpcResponseProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_response_data().empty()) {
    _this->_internal_set_response_data(from._internal_response_data());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponseProto::CopyFrom(const RpcResponseProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.RpcResponseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseProto::IsInitialized() const {
  return true;
}

void RpcResponseProto::InternalSwap(RpcResponseProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_data_, lhs_arena,
      &other->_impl_.response_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcResponseProto, _impl_.error_code_)
      + sizeof(RpcResponseProto::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(RpcResponseProto, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResponseProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fprotocol_2eproto_getter, &descriptor_table_rpc_5fprotocol_2eproto_once,
      file_level_metadata_rpc_5fprotocol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc::RpcRequestProto_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::rpc::RpcRequestProto_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RpcRequestProto_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::RpcRequestProto*
Arena::CreateMaybeMessage< ::rpc::RpcRequestProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RpcRequestProto >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::RpcResponseProto_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::rpc::RpcResponseProto_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RpcResponseProto_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::RpcResponseProto*
Arena::CreateMaybeMessage< ::rpc::RpcResponseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RpcResponseProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
